type User {
  id: ID!
  name: String
  follows: [User] @relation(name: "FOLLOWS", direction: "BOTH")
  contacts:  [Contact] @relation(name: "HAS RELATIONSHIP WITH", direction: "OUT")
  companies:  [Contact] @relation(name: "HAS RELATIONSHIP WITH", direction: "OUT")
  reviews: [Review] @relation(name: "WROTE", direction: "OUT")
  avgStars: Float
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
  recommendations(first: Int = 3): [Business] @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business) WHERE NOT EXISTS( (this)-[:WROTE]->(:Review)-[:REVIEWS]->(rec) )WITH rec, COUNT(*) AS num ORDER BY num DESC LIMIT $first RETURN rec")
}

type Contact {
  id: ID!
  first_name: String
  last_name: String
  suffix: String
  birthday: String
  company_name: String
  job_title: String
  contact_emails: [String]
  phone_numbers: [String]
  address: String
  city: String
  state: String
  linkedin_url: String
  facebook_url: String
  instagram_url: String
  twitter_url: String
  street_address: String
  city: String
  state_province: String
  postal_code: String
  lead_status: String
  lead_type: String
  companies:  [Company] @relation(name: "HAS RELATIONSHIP WITH", direction: "OUT")
  properties:  [Property] @relation(name: "HAS INTEREST IN", direction: "OUT")
  listings:  [Listing] @relation(name: "LISTS", direction: "OUT")
  teams: [Team] @relation(name: "BELONGS TO", direction: "OUT")
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Company {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  contact:  Contact @relation(name: "HAS RELATIONSHIP WITH", direction: "IN")
  properties:  [Property] @relation(name: "HAS INTEREST IN", direction: "OUT")
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Property {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  contact:  Contact @relation(name: "HAS INTEREST IN", direction: "IN")
  company:  Company @relation(name: "HAS INTEREST IN", direction: "IN")
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Address {
  id: ID!
  street_number: String
  street_pre_direction: String
  street_name: String
  street_suffix: String
  street_post_direction: String
  unit_type: String
  unit_number: String
  formatted_street_address: String
  city: String
  state: String
  zip_code: String
  zip_plus_four_code: String
  latitude: Float
  longitude: Float
  census_tract: String
}

type Parcel {
  id: ID!
  apn_original: String
  apn_unformatted: String
  apn_previous: String
  fips_code: String
  depth_ft: Int
  frontage_ft: Int
  area_sq_ft: Int
  area_acres: Float
  county_name: String
  county_land_use_code: String
  county_land_use_description: String
  standardized_land_use_category: String
  standardized_land_use_type: String
  location_descriptions: [String]
  zoning: String
  building_count: Int
  tax_account_number: String
  legal_description: String
  lot_code: String
  lot_number: String
  subdivision: String
  municipality: String
  section_township_range: String
}



type Listing {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Structure {
  id: ID!
  year_built: Int
  effective_year_built: Int
  stories: String
  rooms_count: Int
  beds_count: String
  rooms_count: Int
  baths: Float
  partial_baths_count: Int
  units_count: Int
  parking_type: String
  parking_spaces_count: Int
  pool_type: String
  architecture_type: String
  construction_type: String
  exterior_wall_type: String
  foundation_type: String
  roof_material_type: String
  roof_style_type: String
  heating_type: String
  heating_fuel_type: String
  air_conditioning_type: String
  fireplaces: String
  basement_type: String
  quality: String
  flooring_types: [String]
  plumbing_fixtures_count: String
  interior_wall_type: String
  water_type: String
  sewer_type: String
  total_area_sq_ft: String
  stories: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Space {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Deal {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Task {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Email {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Article {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Post {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Note {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Transaction {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Meeting {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  avgStars: Float @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)")
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Review {
  id: ID!
  stars: Int
  text: String
  date: Date
  business: Business @relation(name: "REVIEWS", direction: "OUT")
  user: User @relation(name: "WROTE", direction: "IN")
}

type Category {
  name: ID!
  businesses: [Business] @relation(name: "IN_CATEGORY", direction: "IN")
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u"
    )
}