type User {
  id: ID!
  first_name: String
  last_name: String
  email: String
  phone_number: String
  email_signature: String
  address:  Address @relation(name: "HAS ADDRESS", direction: "OUT")
  follows: [User] @relation(name: "FOLLOWS", direction: "BOTH")
  teams:  [Team] @relation(name: "IS MEMBER OF", direction: "OUT")
  contacts:  [Contact] @relation(name: "OWNS PROSPECT", direction: "OUT")
  companies:  [Contact] @relation(name: "OWNS PROSPECT", direction: "OUT")
  listings:  [Listing] @relation(name: "IS PRIMARY AGENT FOR", direction: "OUT")
}

type Contact {
  id: ID!
  first_name: String
  last_name: String
  suffix: String
  birthday: String
  company_name: String
  job_title: String
  contact_emails: [String]
  phone_numbers: [String]
  linkedin_url: String
  facebook_url: String
  instagram_url: String
  twitter_url: String
  lead_status: String
  lead_type: String
  address:  Address @relation(name: "HAS ADDRESS", direction: "OUT")
  companies:  [Company] @relation(name: "IS ASSOCIATED WITH", direction: "OUT")
  properties:  [Property] @relation(name: "HAS INTEREST IN", direction: "OUT")
  listings:  [Listing] @relation(name: "LISTS", direction: "OUT")
  deals:  [Deal] @relation(name: "IS ASSOCIATED WITH", direction: "IN")
  teams: [Team] @relation(name: "BELONGS TO", direction: "OUT")
}

type Company {
  id: ID!
  name: String
  address:  Address @relation(name: "HAS ADDRESS", direction: "OUT")
  phone_numbers: [String]
  contacts:  [Contact] @relation(name: "IS ASSOCIATED WITH", direction: "IN")
  properties:  [Property] @relation(name: "HAS INTEREST IN", direction: "OUT")
  deals:  [Deal] @relation(name: "IS ASSOCIATED WITH", direction: "OUT")
  listings:  [Listing] @relation(name: "LISTS", direction: "OUT")
}

type Property {
  id: ID!
  name: String
  property_type: String
  secondary_type: String
  additional_types: [String]
  address:  Address @relation(name: "HAS ADDRESS", direction: "OUT")
  parcels:  [Parcel] @relation(name: "INCLUDES PARCELS", direction: "OUT")
  structures: [Structure] @relation(name: "INCLUDES STRUCTURES", direction: "OUT")
  spaces:  [Space] @relation(name: "IS UNIT OF", direction: "IN")
  contact:  Contact @relation(name: "HAS INTEREST IN", direction: "IN")
  company:  Company @relation(name: "HAS INTEREST IN", direction: "IN")
  listing:  Listing @relation(name: "IS LISTING OF", direction: "IN")
}

type Address {
  id: ID!
  street_number: String
  street_pre_direction: String
  street_name: String
  street_suffix: String
  street_post_direction: String
  unit_type: String
  unit_number: String
  formatted_street_address: String
  city: String
  state: String
  zip_code: String
  zip_plus_four_code: String
  latitude: Float
  longitude: Float
  census_tract: String
}

type Parcel {
  id: ID!
  apn_original: String
  apn_unformatted: String
  apn_previous: String
  fips_code: String
  depth_ft: Int
  frontage_ft: Int
  area_sq_ft: Int
  area_acres: Float
  county_name: String
  county_land_use_code: String
  county_land_use_description: String
  standardized_land_use_category: String
  standardized_land_use_type: String
  location_descriptions: [String]
  zoning: String
  building_count: Int
  tax_account_number: String
  legal_description: String
  lot_code: String
  lot_number: String
  subdivision: String
  municipality: String
  section_township_range: String
}

type Listing {
  id: ID!
  name: String
  lease_or_sale: String
  commission: String  
  listing_expiration: String
  price: Int
  priceTerms: String
  noi: Int
  cap_rate: Float
  sale_conditions: [String]
  leaseTerm: String
  leaseType: String
  sfAvailMin: Int
  sfAvailMax: Int
  use: [String]
  availableOn: String
  availableWithin: String
  tenantName: String
  existingBuildout: String
  condition: String
  layout: String
  privateOffices: Int
  workStations: Int
  conferenceRooms: Int
  numPeopleMin: Int
  numPeopleMax: Int
  amenities: [String]
  spaceNotes: String
  spaceHighlights: [String]
  description: String
  images: [String]
  documents: [String]
  properties:  [Property] @relation(name: "IS LISTING OF", direction: "OUT")
  space:  [Space] @relation(name: "IS LISTING OF", direction: "OUT")
  user:  User @relation(name: "IS PRIMARY AGENT FOR", direction: "IN")
}

type Structure {
  id: ID!
  year_built: Int
  effective_year_built: Int
  stories: String
  rooms_count: Int
  beds_count: String
  rooms_count: Int
  baths: Float
  partial_baths_count: Int
  units_count: Int
  parking_type: String
  parking_spaces_count: Int
  pool_type: String
  architecture_type: String
  construction_type: String
  exterior_wall_type: String
  foundation_type: String
  roof_material_type: String
  roof_style_type: String
  heating_type: String
  heating_fuel_type: String
  air_conditioning_type: String
  fireplaces: String
  basement_type: String
  quality: String
  flooring_types: [String]
  plumbing_fixtures_count: Int
  interior_wall_type: String
  water_type: String
  sewer_type: String
  total_area_sq_ft: String
  typical_floor_sf: String
  building_status: String
  tenancy: String
  ceiling_height: Int
  docks_int: Int
  docks_ext: Int
  elevators_passenger: Int
  elevators_freight: Int
  elevators_escalator: Int
  elevators_parking: Int
  features: [String]
}

type Space {
  id: ID!
  name: String
  floor: String
  unit: String
  total_area_sq_ft: String
  property:  Property @relation(name: "IS UNIT OF", direction: "OUT")
}

type Deal {
  id: ID!
  dealName: String
  amount: String
  createDate: DateTime
  closeDate: DateTime
  dealStage: String
  user: User @relation(name: "IS OWNER OF", direction: "IN") 
}

type Task {
  id: ID!
  name: String
  createDate: DateTime
  completeDate: DateTime
  dueDate: String
  user: User @relation(name: "CREATED", direction: "IN")
  user: User @relation(name: "ASSIGNED_TO", direction: "IN")
  contact: Contact @relation(name: "APPLIES_TO", direction: "OUT")
  deal: Deal @relation(name: "APPLIES_TO", direction: "OUT")
  company: Company @relation(name: "APPLIES_TO", direction: "OUT")
  property: Property @relation(name: "APPLIES_TO", direction: "OUT")
  listing: Listing @relation(name: "APPLIES_TO", direction: "OUT")
}

type Email {
  id: ID!
  forward: Boolean
  reply: Boolean
  subject: String
  content: String
  sent: DateTime
  sent_by_user: SENT_BY_USER
  sent_by_contact: SENT_BY_CONTACT
  sent_to_user: SENT_TO_USER
  sent_to_contact: [SENT_TO_CONTACT]
  opened: [OPENED]
  clicked: [CLICKED]
}

type SentByUser @relation(name: "SENT_BY_USER") {
  from: User
  to: Email
  timestamp: DateTime
}

type SentByContact @relation(name: "SENT_BY_CONTACT") {
  from: Contact
  to: Email
  timestamp: DateTime
}

type SentToUser @relation(name: "SENT_TO_USER") {
  from: User
  to: Email
  timestamp: DateTime
}

type SentToContact @relation(name: "SENT_TO_CONTACT") {
  from: Contact
  to: Email
  timestamp: DateTime
}

type Opened @relation(name: "OPENED") {
  from: Contact
  to: Email
  timestamp: DateTime
}

type Clicked @relation(name: "CLICKED") {
  from: Contact
  to: Email
  timestamp: DateTime
}

type Article {
  id: ID!
  title: String
  excerpt: String
  content: String
  source: String
  link: String
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
  location: Point
  viewed: [VIEWED]
  shared: [SHARED]
  opened_source: [OPENED_SOURCE]
}

type Viewed @relation(name: "VIEWED") {
  from: Contact
  to: Article
  timestamp: DateTime
}

type OpenedSource @relation(name: "OPENED_SOURCE") {
  from: Contact
  to: Article
  timestamp: DateTime
}

type Shared @relation(name: "SHARED") {
  from: Contact
  to: Article
  timestamp: DateTime
  outlet: String
}

type Post {
  id: ID!
  title: String
  meta: String
  keywords: [String]
  images: [String]
  content: String
  viewed_post: [VIEWED_POST]
  shared_post: [SHARED_POST]
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type ViewedPost @relation(name: "VIEWED_POST") {
  from: Contact
  to: Post
  timestamp: DateTime
}

type SharedPost @relation(name: "SHARED_POST") {
  from: Contact
  to: POST
  timestamp: DateTime
  outlet: String
}

type Note {
  id: ID!
  content: String
  createDate: DateTime
  contact: Contact @relation(name: "APPLIES_TO", direction: "OUT")
  deal: Deal @relation(name: "APPLIES_TO", direction: "OUT")
  company: Company @relation(name: "APPLIES_TO", direction: "OUT")
  property: Property @relation(name: "APPLIES_TO", direction: "OUT")
  listing: Listing @relation(name: "APPLIES_TO", direction: "OUT")
}

type Transaction {
  id: ID!
  source: String
  sale_price: Int
  sale: Boolean
  lease: Boolean
  sale_price_description: String
  distressed_sale: Boolean
  date: String
  listingAgent: Contact @relation(name: "REPRESENTED_SELLER", direction: "IN")
  sellingAgent: Contact @relation(name: "REPRESENTED_BUYER", direction: "IN")
  buyers: [Contact] @relation(name: "WAS_BUYER", direction: "IN")
  sellers: [Contact] @relation(name: "WAS_SELLER", direction: "IN")
  companyBuyers: [Company] @relation(name: "WAS_BUYER", direction: "IN")
  companySellers: [Company] @relation(name: "WAS_SELLER", direction: "IN")
  properties: [Property] @relation(name: "SALE_OR_LEASE_OF", direction: "OUT")
  spaces: [Space] @relation(name: "SALE_OR_LEASE_OF", direction: "OUT")
  source: String
  lender_name: String
  loan_amount: Int
  loan_type: String
  loan_due_date: DateTime
  loan_finance_type: String
  loan_interest_rate: Float
}

type Meeting {
  id: ID!
  title: String
  create_date: DateTime
  meeting_time: DateTime
  recurring: Boolean
  recurring_interval: String
  meeting_notes: String
  created_by: User @relation(name: "MEETING_CREATED_BY", direction: "OUT")
  requested_by: Contact @relation(name: "MEETING_REQUESTED_BY", direction: "OUT")
  additional_attendees: [Contact] @relation(name: "ALSO_ATTENDED_BY", direction: "OUT")
  meeting_complete: Boolean
}

type Review {
  id: ID!
  stars: Int
  text: String
  date: Date
  business: Business @relation(name: "REVIEWS", direction: "OUT")
  user: User @relation(name: "WROTE", direction: "IN")
}

type Category {
  name: ID!
  articles: [Article] @relation(name: "IN_CATEGORY", direction: "IN")
  posts: [Post] @relation(name: "IN_CATEGORY", direction: "IN")
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u"
    )
}